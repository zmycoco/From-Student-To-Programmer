5.	清单5.日志对象类
/*
 * 日志数据对象
 */
public class LogBean {
    private String logId;//日志编号
    private String opeUserId;//操作人员

    public String getLogId(){
	return logId;
    }
    public void setLogId(String logId){
	this.logId = logId;
    }

    public String getOpeUserId(){
	return opeUserId;
    }
    public void setOpeUserId(String opeUserId){
	this.opeUserId = opeUserId;
}
public String toString(){
	return "logId="+logId+",opeUserId="+opeUserId;
}
}

6.	清单6.操作日志接口
import java.util.List;

/*
 * 读取日志文件，从文件里面获取存储的日志列表对象
 * @return 存储的日志列表对象
 */
public interface LogFileOperateApi {
     public List<LogBean>readLogFile();
     /**
      * 写日志文件，把日志列表写出到日志文件中去
      * @param list 要写到日志文件的日志列表
      */
     public void writeLogFile(List<LogBean> list);
}

7.	清单7.实现对日志文件的获取
import java.io.File;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

/*
 * 实现对日志文件的操作
 */
public class LogFileOperate implements LogFileOperateApi{
    /*
     * 设置日志文件的路径和文件名称
     */
	private String logFileName = "file.log";
	/*
	 * 构造方法，传入文件的路径和名称
	 */
	public LogFileOperate(String logFilename){
		if(logFilename!=null){
			this.logFileName = logFilename;
		}
	}
	
	@Override
	public List<LogBean>readLogFile() {
		// TODO Auto-generated method stub
		List<LogBean> list = null;
		ObjectInputStreamoin =null;
		//业务代码
		return list;
	}

	@Override
	public void writeLogFile(List<LogBean> list) {
		// TODO Auto-generated method stub
		File file = new File(logFileName);
		ObjectOutputStreamoout = null;
		//业务代码
	}

}

8.	清单8.定义数据库操作接口
public interface LogDbOpeApi {
    /*
     * 新增日志
     * @param需要新增的日志对象
     */
	public void createLog(LogBeanlogbean);
}

9.	清单9.Adapter类实现
import java.util.List;

/*
 * 适配器对象，将记录日志到文件的功能适配成数据库功能
 */
public class LogAdapter implements LogDbOpeApi{
    private LogFileOperateApiadaptee;
    public LogAdapter(LogFileOperateApiadaptee){
	this.adaptee = adaptee;
    }
	@Override
	public void createLog(LogBeanlogbean) {
		// TODO Auto-generated method stub
		List<LogBean> list = adaptee.readLogFile();
		list.add(logbean);
		adaptee.writeLogFile(list);
	}
}

10.	清单10.客户端类实现
import java.util.ArrayList;
import java.util.List;


public class LogClient {
    public static void main(String[] args){
	LogBeanlogbean = new LogBean();
	logbean.setLogId("1");
	logbean.setOpeUserId("michael");
	List<LogBean> list = new ArrayList<LogBean>();
	LogFileOperateApilogFileApi = new LogFileOperate("");
	//创建操作日志的接口对象
	LogDbOpeApiapi = new LogAdapter(logFileApi);
api.createLog(logbean);
    }
}

