范例1：
//============================Program Description=================
//程序名称：
//程序目的:实现队列数据的存入和取出
//==============================================================

import java.io.*;
public class CH05_01
{
public static int front=-1,rear=-1,,max=20;
public static intval;
public static char ch;
public static int queue[ ]=new int [max]
public static void main(String args[ ]) throws IOException
{
String strM;
int M=0;
BufferedReaderkeyin= new BufferedReader( new InputStreamReader(System.in));
while(rear<max-1 && M!=3)
{
System.out.print(“[1]存入一个数值[2]取出一个数值[3]结束: ”);
strM= keyin.readLine( );
M=Integer.parseInt(strM);
switch(M)
{
case 1:
System.out.print(“\n[请输入数值]: “);
strM= keyin.readLine( );
val= Integer.parseInt(strM);
rear++;
queue[rear]=val;
break;
case2:
if(rear>front)
{
front++;
System.out.print(“\n[取出数值为]: [“+queue[front]+”]”+“\n”);
queue[front]=0;
}
else
{
System.out.print(“\n[队列已经空了]\n”);
break;
}
break;
default:
System.out.print(“\n”);
break;
}
}
if(rear==max-1)  System.out.print(“\n[队列已经满了]\n”);
System.out.print(“\n[目前队列中的数据]：”);
if(front>=rear)
{
System.out.print(“没有\n”);
System.out.print(“\n[队列已经空了]\n”);
}
else
{
while(rear>front)
{
front++;
System.out.print(“[“+queue[front]+”]”);
}
System.out.print(“\n”);
}
}
}

范例2：
//============================Program Description=================
//程序名称：
//程序目的:实现以链表建立队列
//==============================================================

import java.io.*;
class QueueNode      //队列节点类
{
int data;             //节点数据
QueueNode next;     //指向下一个节点
//构造函数
public QueueNode(int data) {
this.data=data;
next=null;
}
};

class Linked_List_Queue{  //队列表
public QueueNode front;  //队列的前端指针
public QueueNode rear;   //队列的尾端指针

//构造函数
public Linked_List_Queue( ) { front=null ;rear=null; }

//方法enqueue:队列数据的存入
public Boolean enqueuer(int value) {
QueueNode node=new QueueNode(value); //建立节点
//检查是否为空队列
if(rear==null)
front=node;  //新建立的节点成为第一个节点
else
rear.next=node;  //将节点加入到队列的尾端
rear=node;      //将队列的尾端指针指向新加入的节点
return true;
}

//方法dequeue:队列数据的取出
public int dequeue( ) {
int value;
//检查队列是否为空队列
if(!(front==null){
if(front==rear) rear=null;
value=front.data;  //将队列数据取出
front=front.next;   //将队列的前端指针指向下一个
return value;
}
else return -1;
}
}  //队列类声明结束

public class CH05_02{
//主程序
public static void main(String args[ ] )throws IOException {
Linked_List_Queue queue =new Linked_List_Queue( ); //建立队列对象
int temp;
System.out.println(“以链表来实现队列”);
System.out.println(“=======================================”);
System.out.println(“在队列前端加入第1个数据，此数据值为1”);
queue.enqueue(1);
System.out.println(“在队列前端加入第2个数据，此数据值为3”);
queue.enqueue(3);
System.out.println(“在队列前端加入第3个数据，此数据值为5”);
queue.enqueue(5);
System.out.println(“在队列前端加入第4个数据，此数据值为7”);
queue.enqueue(7);
System.out.println(“在队列前端加入第5个数据，此数据值为9”);
queue.enqueue(9);
System.out.println(“=======================================”);
while(true) {
if(!(queue.front==null)) {
temp=queue.dequeue( );
System.out.println(“从队列前端依序取出的元素数据值为: “+temp);
}
else
break;
}
System.out.println( );
}
}

范例3：
//============================Program Description=================
//程序名称：
//程序目的:实现环形队列数据的存入和取出
//==============================================================

import java.io.*;
public class CH05_03
{
public static int front=-1,rear=-1,val;
public static int queue[ ]=new int[5];
public static void main(String args[ ]) throws IOException
{
String strM;
BufferedReaderKeyin= new BufferedReader(new InputStreamReader(System.in));
while(rear<5 && val!=-1)
{
System.out.print(“请输入一个值已存入队列，要取出值请输入0。（结束输入-1）: “);
strM=keyin.readLine( );
val=Integer.parseInt(strM);
if(val==0)
{
if(front==rear)
{
System.out.print(“[队列已经空了]\n”);
break;
}
front++;
if(front==5)
front=0;
System.out.print(“取出队列值[“+queue[front]+”] \n”);
queue[front]=0;
}
else if (val!=-1 && rear<5)
{
if(rear+1==front || rear==4 && front<=0)
{
System.out.print(“[队列已经满了]\n”);
break;
}
rear++；
if(rear==5)
rear=0;
queue[rear]=val;
}
}
System.out.print(“\n队列剩余数据: \n”);
if(front==rear)
System.out.print(“队列已空!!\n);
else 
{
while(front!=rear)
{
front++;
if(front==5)
front=0;
System.out.print(“[“+queue[front]+”]”);
queue[front]=0;
}
}
System.out.print(“\n”);
}
}

范例4：
//============================Program Description=================
//程序名称：
//程序目的:输入限制性双向队列
//==============================================================

import java.io*;
class QueueNode                      //队列节点类
{
int data;                               //节点数据
QueueNode  next;                     //指向下一个节点
//构造函数
public QueueNode(int data) {
this.data=data;
next=null;
}
};

class Linked_List_Queue {                     //队列类
public QueueNode front;                     //队列的前端指针
public QueueNode rear;                     //队列的尾端指针

//构造函数
public Linked_List_Queue( ) { front=null; rear=null; }

//方法enqueue:队列数据的存入
public Boolean enqueuer (int value) {
QueueNode node=new QueueNode(value);  //建立节点
//检查是否为空队列
if(rear==null)
front=node;                     //新建立的节点成为第一个节点
else
rear.next=node;                  //将节点加入到队列的尾端
rear=node;                       //将队列的尾端指针指向新加入的节点
return true;
}

//方法dequeue:队列数据的取出
public int dequeuer(int action) {
int value;
QueueNode tempNode,startNode;
//从前端取出数据
if(!(front==null)) && action==1) {
if(front==rear) rear=null;
value=front.data;       //将队列数据从前端取出
front=front.next;         //将队列的前端指针指向下一个
return value;  }
//从尾端取出数据
else if(!=(rear==null) && action==2){
startNode=front;    //先记下前端的指针值
value=rear.data;    //取出目前尾端的数据
//找寻最尾端节点的前一个节点
tempNode=front;
while(front.next!=rear && front.next!=null)
{ front=front.next; tempNode=front;}
front=startNode;   //记录从尾端取出数据后的队列前端指针
rear=tempNode;   //记录从尾端取出数据后的队列尾端指针
//下一个程序是指当队列中仅剩下最后节点时，取出数据后便将front及rear指向null
if((front.next==null) || (rear.next==null)) { front=null;rear=null;}
return value; }
else return -1;
}
}  //队列类声明结束

public class CH05_04{
//主程序
public static void main(String args[ ]) throws IOException {
Linked_List_Queue queue=new Linked_List_Queue( );    //建立队列对象
int temp;
System.out.println(“以链表来实现双向队列”);
System.out.println(“====================================”);
System.out.println(“在双向队列前端加入第1个数据，此数据值为1”);
queue.enqueue(1);
System.out.println(“在双向队列前端加入第2个数据，此数据值为3”);
queue.enqueue(3);
System.out.println(“在双向队列前端加入第3个数据，此数据值为5”);
queue.enqueue(5);
System.out.println(“在双向队列前端加入第4个数据，此数据值为7”);
queue.enqueue(7);
System.out.println(“在双向队列前端加入第5个数据，此数据值为9”);
queue.enqueue(9);
System.out.println(“====================================”);
temp=queue.dequeue(1);
System.out.println(“从双向队列前端依序取出的元素数据值为: “ +temp);
temp=queue.dequeue(2);
System.out.println(“从双向队列尾端依序取出的元素数据值为: “ +temp);
temp=queue.dequeue(1);
System.out.println(“从双向队列前端依序取出的元素数据值为: “ +temp);
temp=queue.dequeue(2);
System.out.println(“从双向队列尾端依序取出的元素数据值为: “ +temp);
temp=queue.dequeue(1);
System.out.println(“从双向队列前端依序取出的元素数据值为: “ +temp);
System.out.println();
}
}
