import org.apache.hadoop.conf.Configuration;  
import org.apache.hadoop.fs.Path;  
import org.apache.hadoop.hbase.HBaseConfiguration;  
import org.apache.hadoop.hbase.KeyValue;
import org.apache.hadoop.hbase.client.HTable;
import org.apache.hadoop.hbase.io.ImmutableBytesWritable;  
import org.apache.hadoop.hbase.mapreduce.HFileOutputFormat;
import org.apache.hadoop.hbase.mapreduce.KeyValueSortReducer;
import org.apache.hadoop.io.LongWritable;  
import org.apache.hadoop.io.Text;  
import org.apache.hadoop.mapreduce.Job;  
import org.apache.hadoop.mapreduce.Mapper;  
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;  
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat; 

import java.io.IOException; 

public class generateHFile {
	public static class generateHFileMapper extends Mapper<LongWritable, Text, ImmutableBytesWritable, KeyValue> { 
        @Override
        protected void map(LongWritable key, Text value, Context context) 
             throws IOException, InterruptedException { 
            String line = value.toString(); 
            String[] items = line.split(",", -1); 
            ImmutableBytesWritable rowkey = new ImmutableBytesWritable(items[0].getBytes()); 
            KeyValue kvProtocol = new KeyValue(items[0].getBytes(), "colfam1".getBytes(), "colfam1".getBytes(), items[0].getBytes());  
            if (null != kvProtocol) { 
               context.write(rowkey, kvProtocol); 
            } 
        } 
    }
	
	public static void main(String[] args) throws IOException, InterruptedException, ClassNotFoundException {
		Configuration conf = HBaseConfiguration.create();
		System.out.println("conf="+conf);
		HTable table = new HTable(conf, "testtable1");
		System.out.println("table="+table);
		Job job = new Job(conf, "generateHFile");
		job.setJarByClass(generateHFile.class);  
		job.setOutputKeyClass(ImmutableBytesWritable.class);  
		job.setOutputValueClass(KeyValue.class);  
		job.setMapperClass(generateHFileMapper.class);  
		job.setReducerClass(KeyValueSortReducer.class);  
		job.setOutputFormatClass(HFileOutputFormat.class);//组织成HFile文件
		HFileOutputFormat.configureIncrementalLoad(job, table);//自动对job进行配置，SimpleTotalOrderPartitioner是需要先对key进行整体排序，然后划分到每个reduce中，保证每一个reducer中的的key最小最大值区间范围，是不会有交集的。
     	FileInputFormat.addInputPath(job, new Path(args[0]));  
		FileOutputFormat.setOutputPath(job, new Path(args[1]));  
		System.exit(job.waitForCompletion(true) ? 0 : 1); 
	}
}
